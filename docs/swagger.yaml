basePath: /
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  utils.Credential:
    properties:
      createdAt:
        type: string
      credName:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      domain:
        type: string
      id:
        type: integer
      login:
        type: string
      password:
        type: string
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  utils.CredentialSwag:
    properties:
      credName:
        type: string
      domain:
        type: string
      login:
        type: string
      password:
        type: string
    type: object
  utils.LoginRequest:
    properties:
      name:
        type: string
      password:
        type: string
    type: object
  utils.LoginResponse:
    properties:
      token:
        type: string
      user_id:
        type: integer
    type: object
  utils.UpdateRequest:
    properties:
      credName:
        type: string
      domain:
        type: string
      id:
        type: integer
      login:
        type: string
      password:
        type: string
    type: object
  utils.User:
    properties:
      createdAt:
        type: string
      credential:
        items:
          $ref: '#/definitions/utils.Credential'
        type: array
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      updatedAt:
        type: string
    type: object
host: 127.0.0.1:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Swagger Example API
  version: "2.0"
paths:
  /creds:
    post:
      consumes:
      - application/json
      description: Create credentials of user.
      parameters:
      - description: creds
        in: body
        name: cred
        required: true
        schema:
          $ref: '#/definitions/utils.CredentialSwag'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.Credential'
        "400":
          description: Bad Request
          schema:
            type: int
        "422":
          description: Unprocessable Entity
          schema:
            type: int
      security:
      - ApiKeyAuth: []
      summary: Create credentials.
  /creds/{cred_id}:
    delete:
      description: Delete credentials by id.
      parameters:
      - description: cred_id
        in: path
        name: cred_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: int
        "404":
          description: Not Found
          schema:
            type: int
      security:
      - ApiKeyAuth: []
      summary: Delete credentials by id.
    get:
      description: Get credentials by id.
      parameters:
      - description: cred_id
        in: path
        name: cred_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Credential'
        "404":
          description: Not Found
          schema:
            type: int
      security:
      - ApiKeyAuth: []
      summary: Get credentials by id.
    put:
      consumes:
      - application/json
      description: Update Credentials of your user.
      parameters:
      - description: update request
        in: body
        name: creds
        required: true
        schema:
          $ref: '#/definitions/utils.UpdateRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Credential'
        "404":
          description: Not Found
          schema:
            type: int
        "422":
          description: Unprocessable Entity
          schema:
            type: int
      security:
      - ApiKeyAuth: []
      summary: Update Credentials.
  /creds/all:
    get:
      description: Get all credentials.
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/utils.Credential'
            type: array
        "404":
          description: Not Found
          schema:
            type: int
      security:
      - ApiKeyAuth: []
      summary: Get all credentials.
  /login:
    post:
      consumes:
      - application/json
      description: Log in the app.
      parameters:
      - description: login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/utils.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.LoginResponse'
        "400":
          description: Bad Request
          schema:
            type: int
        "404":
          description: Not Found
          schema:
            type: int
        "500":
          description: Internal Server Error
          schema:
            type: int
      summary: Log in.
  /signup:
    post:
      consumes:
      - application/json
      description: Log in the app.
      parameters:
      - description: signup
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/utils.LoginRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.User'
        "409":
          description: Conflict
          schema:
            type: int
        "422":
          description: Unprocessable Entity
          schema:
            type: int
      summary: Signup.
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
